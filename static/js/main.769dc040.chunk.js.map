{"version":3,"sources":["components/TextArea.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","wrapper","margin","display","leftSide","marginTop","width","flexDirection","justifyContent","alignItems","rightSide","padding","textarea","background","circle","color","palette","primary","main","line","height","borderLeft","filledline","focused","multilineColor","TextArea","props","useState","isFocussed","setIsFocussed","classes","className","value","length","Typography","text","TextField","autoFocus","onFocus","onBlur","name","onChange","handleChange","variant","fullWidth","multiline","InputProps","Form","initialState","examination","clinicalhistory","findings","impressions","technique","enqueueSnackbar","useSnackbar","formData","setFormData","target","prevState","onSubmit","event","preventDefault","console","log","Button","style","float","type","root","maxWidth","App","Card","CardContent","Boolean","window","location","hostname","match","createMuiTheme","paper","default","ReactDOM","render","ThemeProvider","CssBaseline","maxSnack","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gTAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,QAAS,CACLC,OAAQ,KACRC,QAAS,QAEbC,SAAU,CACNC,UAAW,KACXC,MAAO,MACPH,QAAS,OACTI,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEhBC,UAAW,CACPJ,MAAO,MACPK,QAAS,aAEbC,SAAU,CACNC,WAAY,WAEhBC,OAAQ,CACJC,MAAOf,EAAMgB,QAAQC,QAAQC,MAEjCC,KAAM,CACFC,OAAQ,OACRC,WAAY,kBAEhBC,WAAY,CACRF,OAAQ,OACRC,WAAY,qBAEhBE,QAAS,CACLR,MAAO,SAEXS,eAAgB,CACZT,MAAO,aAoDAU,MAhDf,SAAkBC,GAAQ,IAAD,EACeC,oBAAS,GADxB,mBACdC,EADc,KACFC,EADE,KAQfC,EAAUhC,IAChB,OACI,yBAAKiC,UAAWD,EAAQ7B,SACpB,yBAAK8B,UAAWD,EAAQ1B,UACnBsB,EAAMM,MAAMC,OAAS,EAClB,oCACI,kBAAC,IAAD,CAAaF,UAAWD,EAAQhB,SAChC,yBAAKiB,UAAWD,EAAQR,cAG5B,oCACI,kBAAC,IAAD,MACA,yBAAKS,UAAWD,EAAQX,SAIpC,yBAAKY,UAAWD,EAAQpB,WACpB,kBAACwB,EAAA,EAAD,CAAYH,UAAWH,EAAaE,EAAQP,QAAU,IACjDG,EAAMS,MAEX,kBAACC,EAAA,EAAD,CACIC,UAAWX,EAAMW,UACjBC,QA5BI,WAChBT,GAAc,IA4BFU,OA1BG,WACfV,GAAc,IA0BFW,KAAMd,EAAMc,KACZC,SAAUf,EAAMgB,aAChBV,MAAON,EAAMM,MACbW,QAAS,WACTC,WAAW,EACXC,WAAW,EACXd,UAAWD,EAAQlB,SACnBkC,WAAY,CACRf,UAAWD,EAAQN,qB,iBCR5BuB,MAzEf,WACI,IAAMC,EAAe,CACjBC,YAAa,GACbC,gBAAiB,GACjBC,SAAU,GACVC,YAAa,GACbC,UAAW,IAEPC,EAAoBC,cAApBD,gBARI,EASoB3B,mBAASqB,GAT7B,mBASLQ,EATK,KASKC,EATL,KAWNf,EAAe,SAAC,GAAiC,IAAD,IAA9BgB,OAAUlB,EAAoB,EAApBA,KAAMR,EAAc,EAAdA,MACpCyB,GAAY,SAACE,GACT,OAAO,2BAAKA,GAAZ,kBAAwBnB,EAAOR,QAavC,OACI,6BACI,0BAAM4B,SAXO,SAACC,GAClBA,EAAMC,iBACNC,QAAQC,IAAIR,GACZF,EAAgB,8CAA+C,CAC3DX,QAAS,YAEbc,EAAYT,KAMJ,kBAAC,EAAD,CACIR,KAAM,cACNE,aAAcA,EACdV,MAAOwB,EAASP,YAChBd,KAAM,cACNE,WAAW,IAEf,kBAAC,EAAD,CACIG,KAAM,kBACNE,aAAcA,EACdV,MAAOwB,EAASN,gBAChBf,KAAM,qBAEV,kBAAC,EAAD,CACIK,KAAM,YACNE,aAAcA,EACdV,MAAOwB,EAASH,UAChBlB,KAAM,cAEV,kBAAC,EAAD,CACIK,KAAM,WACNE,aAAcA,EACdV,MAAOwB,EAASL,SAChBhB,KAAM,aAEV,kBAAC,EAAD,CACIK,KAAM,cACNE,aAAcA,EACdV,MAAOwB,EAASJ,YAChBjB,KAAM,gBAEV,kBAAC8B,EAAA,EAAD,CACIC,MAAO,CAAEhE,OAAQ,KAAMiE,MAAO,QAAS7D,MAAO,OAC9C8D,KAAM,SACNzB,QAAQ,YACR5B,MAAM,WAJV,a,kBC1DVjB,EAAYC,YAAW,CACzBsE,KAAM,CACFC,SAAU,OAiBHC,MAbf,WACI,IAAMzC,EAAUhC,IAChB,OACI,6BACI,kBAAC0E,EAAA,EAAD,CAAMzC,UAAWD,EAAQuC,MACrB,kBAACI,EAAA,EAAD,KACI,kBAAC,EAAD,UCPAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BCNA9E,EAAQ+E,YAAe,CACzB/D,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVL,WAAY,CACRmE,MAAO,UACPC,QAAS,WAEb9C,KAAM,CACFlB,QAAS,cAKrBiE,IAASC,OACL,kBAACC,EAAA,EAAD,CAAepF,MAAOA,GAClB,kBAACqF,EAAA,EAAD,KACI,kBAAC,IAAD,CAAkBC,SAAU,GACxB,kBAAC,EAAD,SAIZC,SAASC,eAAe,SDgGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.769dc040.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { Typography } from '@material-ui/core'\r\nimport CheckCircle from '@material-ui/icons/CheckCircle'\r\nimport PanoramaFishEye from '@material-ui/icons/PanoramaFishEye'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        margin: '1%',\r\n        display: 'flex',\r\n    },\r\n    leftSide: {\r\n        marginTop: '1%',\r\n        width: '10%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    rightSide: {\r\n        width: '90%',\r\n        padding: '2% 0 2% 0',\r\n    },\r\n    textarea: {\r\n        background: '#080f13',\r\n    },\r\n    circle: {\r\n        color: theme.palette.primary.main,\r\n    },\r\n    line: {\r\n        height: '100%',\r\n        borderLeft: '2px solid grey',\r\n    },\r\n    filledline: {\r\n        height: '100%',\r\n        borderLeft: '2px solid #318bfe',\r\n    },\r\n    focused: {\r\n        color: 'white',\r\n    },\r\n    multilineColor: {\r\n        color: 'white',\r\n    },\r\n}))\r\n\r\nfunction TextArea(props) {\r\n    const [isFocussed, setIsFocussed] = useState(false)\r\n    const hangleFocus = () => {\r\n        setIsFocussed(true)\r\n    }\r\n    const hangleBlur = () => {\r\n        setIsFocussed(false)\r\n    }\r\n    const classes = useStyles()\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.leftSide}>\r\n                {props.value.length > 0 ? (\r\n                    <>\r\n                        <CheckCircle className={classes.circle} />\r\n                        <div className={classes.filledline}></div>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <PanoramaFishEye />\r\n                        <div className={classes.line}></div>\r\n                    </>\r\n                )}\r\n            </div>\r\n            <div className={classes.rightSide}>\r\n                <Typography className={isFocussed ? classes.focused : ''}>\r\n                    {props.text}\r\n                </Typography>\r\n                <TextField\r\n                    autoFocus={props.autoFocus}\r\n                    onFocus={hangleFocus}\r\n                    onBlur={hangleBlur}\r\n                    name={props.name}\r\n                    onChange={props.handleChange}\r\n                    value={props.value}\r\n                    variant={'outlined'}\r\n                    fullWidth={true}\r\n                    multiline={true}\r\n                    className={classes.textarea}\r\n                    InputProps={{\r\n                        className: classes.multilineColor,\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextArea\r\n","import React, { useState } from 'react'\r\nimport TextArea from './TextArea'\r\nimport { Button } from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nfunction Form() {\r\n    const initialState = {\r\n        examination: '',\r\n        clinicalhistory: '',\r\n        findings: '',\r\n        impressions: '',\r\n        technique: '',\r\n    }\r\n    const { enqueueSnackbar } = useSnackbar()\r\n    const [formData, setFormData] = useState(initialState)\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setFormData((prevState) => {\r\n            return { ...prevState, [name]: value }\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        console.log(formData)\r\n        enqueueSnackbar('Your report has been successfully submitted', {\r\n            variant: 'success',\r\n        })\r\n        setFormData(initialState)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <TextArea\r\n                    name={'examination'}\r\n                    handleChange={handleChange}\r\n                    value={formData.examination}\r\n                    text={'Examination'}\r\n                    autoFocus={true}\r\n                />\r\n                <TextArea\r\n                    name={'clinicalhistory'}\r\n                    handleChange={handleChange}\r\n                    value={formData.clinicalhistory}\r\n                    text={'Clinical History'}\r\n                />\r\n                <TextArea\r\n                    name={'technique'}\r\n                    handleChange={handleChange}\r\n                    value={formData.technique}\r\n                    text={'Technique'}\r\n                />\r\n                <TextArea\r\n                    name={'findings'}\r\n                    handleChange={handleChange}\r\n                    value={formData.findings}\r\n                    text={'Findings'}\r\n                />\r\n                <TextArea\r\n                    name={'impressions'}\r\n                    handleChange={handleChange}\r\n                    value={formData.impressions}\r\n                    text={'Impressions'}\r\n                />\r\n                <Button\r\n                    style={{ margin: '2%', float: 'right', width: '40%' }}\r\n                    type={'submit'}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\nimport './App.css'\nimport Form from './components/Form'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 500,\n    },\n})\n\nfunction App() {\n    const classes = useStyles()\n    return (\n        <div>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Form />\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { ThemeProvider } from '@material-ui/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport { createMuiTheme } from '@material-ui/core/styles'\n\nimport { SnackbarProvider } from 'notistack'\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#318bfe',\n        },\n        background: {\n            paper: '#00070b',\n            default: '#00070b',\n        },\n        text: {\n            primary: '#686262',\n        },\n    },\n})\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline>\n            <SnackbarProvider maxSnack={3}>\n                <App />\n            </SnackbarProvider>\n        </CssBaseline>\n    </ThemeProvider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}